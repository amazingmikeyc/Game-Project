var thescreen;
var player;
var blocks;

var thelevel;

var mouseX;

var score = 0;
var time = 0;

var dragMode;
var dragLast = {"x":0,"y":0}

var mode = 'game';

function loadLevel(level) {
	imgArray = level.img;

	objects = level.level;
	
	for (o in objects) {
		thelevel.foreground.add(new staticObject(objects[o].x, objects[o].y,'' +  imgArray[objects[o].i]));
console.log('item created, '+objects[o].x+'x'+objects[o].y + ' - ' + imgArray[objects[o].i]);
	}

	thelevel.backdrop.add(new staticObject(0,-480,'game_images/clouds.png'));

	thelevel.backdrop.add(new staticObject(0,0,'game_images/clouds.png'));

	thelevel.backdrop.add(new staticObject(0,480,'game_images/clouds.png'));

	thelevel.backdrop.add(new staticObject(640,480,'game_images/clouds.png'));

	thelevel.distance.add(new staticObject(0,0,'game_images/clouds2.png'));
	thelevel.distance.add(new staticObject(0,480,'game_images/clouds2.png'));


}

$(document).ready(function() {
	//start
	player = new playableObject('player');

	thescreen = new screen();

	thelevel = new level();

	$.get('loadlevel.php', function(data) {
		level = jQuery.parseJSON( data );
		
		loadLevel(level);

	});

	//main game loop!
	var timeoutID = window.setInterval(function() {

		if (mode == 'game') {

			$('#frame1').trigger('mousemove')
	
			player.move();
			
			time++;
		}
		else {


		}
		thelevel.draw(thescreen);
		//thescreen.drawOn();

		
	
		//$('#status').html(Math.round(time/100) + 's' + '  ' + score);
	
	},10);

		$('#frame1').mousemove(function(e) {
			if (mode=='game') {
				if (e.pageX) {
					mouseX = e.pageX;
				}
	
				distance = mouseX - 250;
	
				if (distance<0) { distance = -distance }
	
			
				if (mouseX>270) {
					player.xaccel=player.xaccel+(distance/500)
					if (player.xaccel>3) player.xaccel=3;
				}
				
				if (mouseX<220) {
					player.xaccel=player.xaccel-(distance/500);
					if (player.xaccel<-3) player.xaccel=-3;
				}
			}
			else {
			//	player.top = e.pageY;
			//	player.left = e.pageX;

				col = thelevel.collision(e.pageX+thescreen.left, e.pageY+thescreen.top);

				for (c in col) {
					col[c].highlight = true;
					
				}


				if (dragMode) {
					x = e.pageX - dragLast.x;
					y  =e.pageY - dragLast.y;

					thescreen.left = thescreen.left + x;
					thescreen.top  = thescreen.top + y;

					dragLast.x  = e.pageX;
					dragLast.y  = e.pageY;
			

$('#status').html(thescreen.left+ 'x' + thescreen.top);
				}
			}
	

		});

		$('#frame1').mousedown(function(e) {
			if (mode=='game') {
				if (player.yaccel==0) {
						player.yaccel=-10;
						player.top--;
					}
			}
			else {
				dragMode = true;
				dragLast.x  = e.pageX;
				dragLast.y  = e.pageY;
			}

			
		});

		$('#frame1').mouseup(function(e) {
			dragMode = false;
		});	


	
});

function level() {
	//backgrounds
	this.backdrop = new layer();
	this.distance = new layer();
	this.distance2 = new layer();

	this.background = new layer();
	this.foreground = new layer();

	this.backdrop.parallax = 10;
	this.distance.parallax = 5;

	this.draw = function(screen) {
		if (mode=='game') {
			thescreen.left = player.left -250 ;
			thescreen.top  = player.top -250;
		}
		else {
		//	thescreen.left=0;
		//	thescreen.top=0;
		}
		screen.ctx.fillStyle = "rgb(255,255,255)";

		screen.ctx.fillRect(0,0,500,500);

		this.backdrop.draw(screen.ctx);
		this.distance.draw(screen.ctx);
		this.foreground.draw(screen.ctx);

		player.draw(screen.ctx);
	}
	
	
	//Has something in the foreground collided with
	//our man?
	this.collision = function(x,y) {
		var detectArray = new Array();

		for (item in this.foreground.items) {
			detect = this.foreground.items[item].detect(x,y) 
		
			if (detect) {
				detectArray[detectArray.length] = detect;	
			}
			
		}
		return detectArray;
	} 

}

//screen layer
function layer() {
	this.parallax = 1;
	
	this.items = new Array();

	this.add = function(item) {
		

		this.items[this.items.length] = item;
	}

	this.draw = function(ctx) {		

		for (item in this.items) {
			
			this.items[item].draw(ctx , this.parallax);
		}

	}
}

//the screen itself
function screen() {
	this.left = 0;
	this.top  = 0;

	canvas = document.getElementById('frame1');

	this.ctx = canvas.getContext('2d');

}

function playableObject(id, image) {
	this.left =150;
	this.top=0;
	this.xaccel = 0;
	this.yaccel = 0;
	this.height = 40;
	this.width  = 22;
	this.direction = 'left';
	this.id = id;	

	this.image = new Image();
	this.image.src = 'game_images/man.png';

	


	//functions
	this.draw = function(ctx) {
		if (this.direction=='left') {
			pos = 21;
		}
		else {
			pos = 0;
		}

		ctx.drawImage(this.image, pos,0,22,40,250, 250 , this.width,this.height);
	}
	
	//What's our man doing?
	this.getaction = function() {
		
	}

	this.move = function() {

		this.top = this.top + this.yaccel;
		this.left = Math.round(this.left + this.xaccel);

		//detectionMiddle = thelevel.collision(this.left+(this.width/2),this.top+(this.height/2));


		//these are used for up and down
		detectionTopLeft = thelevel.collision(this.left, this.top);
		detectionTopRight = thelevel.collision(this.left+this.width, this.top);
		detectionBottomLeft = thelevel.collision(this.left, this.top+this.height);
		detectionBottomRight = thelevel.collision(this.left+this.width, this.top+this.height);

	
		this.yaccel+=.3;
		if (this.yaccel >10) {
			this.yaccel = 10
		}

		
		if (detectionBottomLeft.length&&detectionBottomRight.length) {
			this.yaccel = 0;	
			for(item in detectionBottomLeft) {
				this.top = detectionBottomLeft[item].top-this.height;
			}
		}

		if (detectionTopLeft.length&&detectionTopRight.length) {
			this.yaccel = 0;	
			for(item in detectionTopLeft) {
				this.top = detectionTopLeft[item].top+detectionTopLeft[item].height+1;
			}
		}

		if (detectionTopRight.length&&detectionBottomRight.length) {
			for(item in detectionTopRight) {
				this.left = detectionTopRight[item].left-this.width;
			}
		}


		if (detectionTopLeft.length&&detectionBottomLeft.length) {
			for(item in detectionTopLeft) {
				this.left = detectionTopLeft[item].left+ detectionTopLeft[item].width;
			}
		}


		$('#debugbox').html(this.left + 'x' + this.top + ' -- ' + Math.round(this.xaccel,2));

		//collision detection...

		if (this.xaccel<0) {
			this.direction = 'left';
			this.xaccel= this.xaccel + 0.2;
		}
		if (this.xaccel>0) {
			this.xaccel= this.xaccel - 0.2;
			this.direction = 'right'
		}

	}

	//$('body').append(objectDiv);

	
}

function staticObject(x,y, src) {
	this.left=x;
	this.top = y;

	this.highlight=false;

	this.image = new Image();
	this.image.src = src;

	this.height=this.image.height;
	this.width=this.image.width;

	//functions
	this.draw = function(ctx, parallax) {

		ctx.drawImage(this.image, (this.left - thescreen.left) / parallax, (this.top- thescreen.top )/ parallax, this.image.width,this.image.height);

		if (this.highlight) {
			ctx.strokeRect(this.left- thescreen.left, this.top- thescreen.top, this.width, this.height);
		}
	}
	
	//check if a point is within this object
	this.detect = function(x,y) {
		this.height = this.image.height;
		this.width  = this.image.width;		
this.highlight=false;

		if ((x>=this.left)
			&&(x<=this.left+this.width)
			&&(y>=this.top)
			&&y<=(this.top+this.height)) {
			return this;
		}
		
	}

}